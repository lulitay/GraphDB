//Eliminar el graph
graph.close()
:q
janusgraph.sh stop
janusgraph.sh clean

== INDICES ==

//1. descComposite
mgmt = graph.openManagement()
mgmt.buildIndex('descComposite', Vertex.class).addKey(mgmt.getPropertyKey('desc')).buildCompositeIndex()
mgmt.commit()
ManagementSystem.awaitGraphIndexStatus(graph, 'descComposite').call()
mgmt = graph.openManagement()
mgmt.updateIndex(mgmt.getGraphIndex("descComposite"), SchemaAction.REINDEX).get()
mgmt.commit()

//2. runwaysComposite
mgmt = graph.openManagement()
mgmt.buildIndex('runwaysComposite', Vertex.class).addKey(mgmt.getPropertyKey('runways')).buildCompositeIndex()
mgmt.commit()
ManagementSystem.awaitGraphIndexStatus(graph, 'runwaysComposite').call()
mgmt = graph.openManagement()
mgmt.updateIndex(mgmt.getGraphIndex("runwaysComposite"), SchemaAction.REINDEX).get()
mgmt.commit()

//3. countryDescComposite
mgmt = graph.openManagement()
mgmt.buildIndex('countryDescComposite', Vertex.class).addKey(mgmt.getPropertyKey('desc')).indexOnly(mgmt.getVertexLabel('country')).buildCompositeIndex()
mgmt.commit()
ManagementSystem.awaitGraphIndexStatus(graph, 'countryDescComposite').call()
mgmt = graph.openManagement()
mgmt.updateIndex(mgmt.getGraphIndex('countryDescComposite'), SchemaAction.REINDEX).get()
mgmt.commit()

//4. latlonComposite
//Primero se crean los indices por separado
mgmt = graph.openManagement()
mgmt.buildIndex('latlonComposite', Vertex.class).addKey(mgmt.getPropertyKey('lat')).addKey(mgmt.getPropertyKey('lon')).buildCompositeIndex()
mgmt.commit()
ManagementSystem.awaitGraphIndexStatus(graph, 'latlonComposite').call()
mgmt = graph.openManagement()
mgmt.updateIndex(mgmt.getGraphIndex("latlonComposite"), SchemaAction.REINDEX).get()
mgmt.commit()

//5. descCompositeCons
mgmt = graph.openManagement()
mgmt.buildIndex('descCompositeCons', Vertex.class).addKey(mgmt.getPropertyKey('desc')).indexOnly(mgmt.getVertexLabel('continent')).buildCompositeIndex()
mgmt.commit()
ManagementSystem.awaitGraphIndexStatus(graph, 'descCompositeCons').call()
mgmt = graph.openManagement()
mgmt.updateIndex(mgmt.getGraphIndex("descCompositeCons"), SchemaAction.REINDEX).get()
mgmt.commit()

//6. descMixedCons
mgmt = graph.openManagement()
mgmt.buildIndex('descMixedCons', Vertex.class).addKey(mgmt.getPropertyKey('desc')).indexOnly(mgmt.getVertexLabel('airport')).buildMixedIndex("search")
mgmt.commit()
ManagementSystem.awaitGraphIndexStatus(graph, 'descMixedCons').call()
mgmt = graph.openManagement()
mgmt.updateIndex(mgmt.getGraphIndex("descMixedCons"), SchemaAction.REINDEX).get()
mgmt.commit()

//7. descMixed2
mgmt = graph.openManagement()
mgmt.buildIndex('descMixed2', Vertex.class).addKey(mgmt.getPropertyKey('desc')).buildMixedIndex("search")
mgmt.commit()
ManagementSystem.awaitGraphIndexStatus(graph, 'descMixed2').call()
mgmt = graph.openManagement()
mgmt.updateIndex(mgmt.getGraphIndex("descMixed2"), SchemaAction.REINDEX).get()
mgmt.commit()

//8. tripleMixCons2
mgmt = graph.openManagement()
mgmt.buildIndex('tripleMixCons2', Vertex.class).addKey(mgmt.getPropertyKey('city')).addKey(mgmt.getPropertyKey('code')).addKey(mgmt.getPropertyKey('desc')).indexOnly(mgmt.getVertexLabel('airport')).buildMixedIndex("search")
mgmt.commit()
ManagementSystem.awaitGraphIndexStatus(graph, 'tripleMixCons2').call()
mgmt = graph.openManagement()
mgmt.updateIndex(mgmt.getGraphIndex("tripleMixCons2"), SchemaAction.REINDEX).get()
mgmt.commit()

//9. runwaysMixed
mgmt = graph.openManagement()
mgmt.buildIndex('runwaysMixed', Vertex.class).addKey(mgmt.getPropertyKey('runways')).buildMixedIndex("search")
mgmt.commit()
ManagementSystem.awaitGraphIndexStatus(graph, 'runwaysMixed').call()
mgmt = graph.openManagement()
mgmt.updateIndex(mgmt.getGraphIndex("runwaysMixed"), SchemaAction.REINDEX).get()
mgmt.commit()

//10. cityElevConstrain
mgmt = graph.openManagement()
mgmt.buildIndex('cityElevConstrain', Vertex.class).addKey(mgmt.getPropertyKey('city')).addKey(mgmt.getPropertyKey('elev')).indexOnly(mgmt.getVertexLabel('airport')).buildMixedIndex("search")
mgmt.commit()
ManagementSystem.awaitGraphIndexStatus(graph, 'cityElevConstrain').call()
mgmt = graph.openManagement()
mgmt.updateIndex(mgmt.getGraphIndex("cityElevConstrain"), SchemaAction.REINDEX).get()
mgmt.commit()

//11. cityString
mgmt = graph.openManagement()
mgmt.buildIndex('cityString', Vertex.class).addKey(mgmt.getPropertyKey('city'), Mapping.STRING.asParameter()).buildMixedIndex("search")
mgmt.commit()
ManagementSystem.awaitGraphIndexStatus(graph, 'cityString').call()
mgmt = graph.openManagement()
mgmt.updateIndex(mgmt.getGraphIndex("cityString"), SchemaAction.REINDEX).get()
mgmt.commit()

//12. runwaysMixedConst
graph.traversal().V().order().by('runways').limit(10).values('desc','runways')
mgmt = graph.openManagement()
mgmt.buildIndex('runwaysMixedConst', Vertex.class).addKey(mgmt.getPropertyKey('runways')).indexOnly(mgmt.getVertexLabel('airport')).buildMixedIndex("search")
mgmt.commit()
ManagementSystem.awaitGraphIndexStatus(graph, 'runwaysMixedConst2').call()
mgmt = graph.openManagement()
mgmt.updateIndex(mgmt.getGraphIndex("runwaysMixedConst2"), SchemaAction.REINDEX).get()
mgmt.commit()

//13. distEdge2
mgmt = graph.openManagement()
mgmt.buildIndex('distEdge2', Edge.class).addKey(mgmt.getPropertyKey('dist')).buildMixedIndex("search")
mgmt.commit()
ManagementSystem.awaitGraphIndexStatus(graph, 'distEdge2').call()
mgmt = graph.openManagement()
mgmt.updateIndex(mgmt.getGraphIndex("distEdge2"), SchemaAction.REINDEX).get()
mgmt.commit()

//14. cityComposite
mgmt = graph.openManagement()
mgmt.buildIndex('cityComposite', Vertex.class).addKey(mgmt.getPropertyKey('city')).buildCompositeIndex()
mgmt.commit()
ManagementSystem.awaitGraphIndexStatus(graph, 'cityComposite').call()
mgmt = graph.openManagement()
mgmt.updateIndex(mgmt.getGraphIndex("cityComposite"), SchemaAction.REINDEX).get()
mgmt.commit()
graph.traversal().V().has('city', 'New York').out().has('city', within('London', 'Paris', 'Amsterdam', 'Berlin')).path().by('desc')
graph.traversal().V().has('city', 'zzz').out().has('city', within('London', 'Paris', 'Amsterdam', 'Berlin')).path().by('desc') - 0.054817

//15. coordsIndex
mgmt = graph.openManagement()
coords = mgmt.makePropertyKey('coords').dataType(Geoshape.class).make()
mgmt.buildIndex('coordsIndex', Vertex.class).addKey(coords, Mapping.PREFIX_TREE.asParameter()).buildMixedIndex("search")
mgmt.commit()
graph.traversal().V().local( __.as('x').map{ Geoshape.point(it.get().values('lat').next(), it.get().values('lon').next()) }.as('coords').select('x').property('coords', select('coords')) ).iterate()

== QUERIES ==

//1.
graph.traversal().V().has('desc', 'Argentina').values('desc')
graph.traversal().V().has('desc', 'Zambia').values('desc')
graph.traversal().V().has('desc', 'Xer').values('desc')

//2.
graph.traversal().V().has('runways', 5).values('desc')
graph.traversal().V().has('runways', 1).values('desc')
graph.traversal().V().has('runways', 10).values('desc')

//3.
graph.traversal().V().hasLabel('country').has('desc', 'Argentina').values('desc')
graph.traversal().V().has('desc', 'Argentina').hasLabel('country').values('desc')
graph.traversal().V().hasLabel('country').has('desc', 'zzz').values('desc')
graph.traversal().V().has('desc', 'zzz').hasLabel('country').values('desc')

//4.
graph.traversal().V().has('lat', '-34.8222').has('lon', '-58.5358').values('code', 'desc')
graph.traversal().V().has('lat', '0').has('lon', '0').values('code', 'desc')

//5.
graph.traversal().V().hasLabel('airport').inE().otherV().hasLabel('continent').groupCount().by('desc').unfold()
graph.traversal().V().hasLabel('airport').inE().otherV().hasLabel('country').groupCount().by('desc').unfold()

//6.
graph.traversal().V().hasLabel('airport').has('desc', containing('International')).order().by(bothE().hasLabel('route').count()).values('desc')
graph.traversal().V().hasLabel('airport').has('desc', containing('a')).order().by(bothE().hasLabel('route').count()).values('desc')
graph.traversal().V().hasLabel('airport').has('desc', containing('zzz')).order().by(bothE().hasLabel('route').count()).values('desc')

//7.
graph.traversal().V().has('desc', textContainsPrefix('Ar')).values('desc')
graph.traversal().V().has('desc', textContainsPrefix(‘Bel’)).values('desc')

//8.
graph.traversal().V().hasLabel('airport').has('city', textContainsPrefix('C')).has('code', textContainsPrefix('C')).has('desc', textContainsPrefix('C')).values('desc','city','code')
graph.traversal().V().hasLabel('airport').has('city', textContainsPrefix('R')).has('code', textContainsPrefix('G')).has('desc', textContainsPrefix('B')).values('desc','city','code')
graph.traversal().V().hasLabel('airport').has('city', textContainsPrefix('R')).has('code', textContainsPrefix('B')).has('desc', textContainsPrefix('B')).values('desc','city','code')

//9.
graph.traversal().V().has('runways', gt(5)).values('desc','runways')
graph.traversal().V().has('runways', gt(1)).values('desc','runways')
graph.traversal().V().has('runways', gt(10)).values('desc','runways')

//10.
graph.traversal().V().hasLabel('airport').has('city', textContainsRegex('.*[z,Z].*')).has('elev', inside(1000,2000)).values('desc','city','elev')
graph.traversal().V().has('city', textContainsRegex('.*[z,Z].*')).has('elev', inside(1000,2000)).hasLabel('airport').values('desc','city','elev')
graph.traversal().V().hasLabel('airport').has('city', textContainsRegex('.*[!].*')).has('elev', inside(1000,2000)).values('desc','city','elev')
graph.traversal().V().has('city', textContainsRegex('.*[!].*')).has('elev', inside(1000,2000)).hasLabel('airport').values('desc','city','elev')
graph.traversal().V().hasLabel('airport').has('city', textContainsRegex('.*[g,G].*')).has('elev', inside(1000,2000)).values('desc','city','elev')

//11.
graph.traversal().V().has('city', textFuzzy('Buenoz Airez')).values('desc','city')
graph.traversal().V().has('city', textFuzzy('landon')).values('desc','city')
graph.traversal().V().has('city', textFuzzy('zzz')).values('desc','city')

//12.
graph.traversal().V().has('elev', gte(100)).has('runways', inside(5,7)).has('longest', lt(14000)).values('code','elev','runways','longest')
graph.traversal().V().has('longest', lt(14000)).has('elev', gte(100)).has('runways', inside(5,7)).values('code','elev','runways','longest')
graph.traversal().V().has('longest', lt(14000)).has('elev', gte(100)).has('runways', inside(1,7)).values('code','elev','runways','longest')

//13.
graph.traversal().V().order().by('runways').limit(10).values('desc','runways')

//14.
graph.traversal().E().has('dist', lte(400)).order().by('dist', desc).values('dist')
graph.traversal().E().has('dist', lte(0)).order().by('dist', desc).values('dist')

//15.
graph.traversal().V().not(bothE()).values('desc')

//16.
graph.traversal().V().has('city', 'New York').out().has('city', within('London', 'Paris', 'Amsterdam', 'Berlin')).path().by('desc')
graph.traversal().V().has('city', 'zzz').out().has('city', within('London', 'Paris', 'Amsterdam', 'Berlin')).path().by('desc')
graph.traversal().V().has('city', 'Buenos Aires').out().has('city', within('London', 'Paris', 'Amsterdam', 'Berlin')).path().by('desc')

//17.
graph.traversal().V().has("coords", geoWithin(Geoshape.circle(-34.8222, -58.5358, 1))).valueMap(true)
graph.traversal().V().has("coords", geoWithin(Geoshape.circle(-34.8222, -58.5358, 100))).valueMap(true)
graph.traversal().V().has("coords", geoWithin(Geoshape.circle(-34.8222, -58.5358, 100000))).valueMap(true)
graph.traversal().V().has("coords", geoDisjoint(Geoshape.circle(-34.8222, -58.5358, 1))).valueMap(true)
graph.traversal().V().has("coords", geoDisjoint(Geoshape.circle(-34.8222, -58.5358, 100))).valueMap(true)
graph.traversal().V().has("coords", geoDisjoint(Geoshape.circle(-34.8222, -58.5358, 100000))).valueMap(true)
graph.traversal().V().has("coords", geoIntersect(Geoshape.circle(-34.8222, -58.5358, 1))).valueMap(true)
graph.traversal().V().has("coords", geoIntersect(Geoshape.circle(-34.8222, -58.5358, 100))).valueMap(true)
graph.traversal().V().has("coords", geoIntersect(Geoshape.circle(-34.8222, -58.5358, 100000))).valueMap(true)
graph.traversal().V().has("coords", geoContains(Geoshape.circle(-34.8222, -58.5358, 1))).valueMap(true)
graph.traversal().V().has("coords", geoContains(Geoshape.circle(-34.8222, -58.5358, 100))).valueMap(true)
graph.traversal().V().has("coords", geoContains(Geoshape.circle(-34.8222, -58.5358, 100000))).valueMap(true)

//18.
graph.traversal().V().or(has('city', textFuzzy('Landon')), has('desc', textContainsPrefix('London'))).values('city','desc')
graph.traversal().V().or(has('desc', textContainsPrefix('London')), has('city', textFuzzy('Landon'))).values('city','desc')
